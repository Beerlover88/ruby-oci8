1.0.0-rc2:

1. support SQL*Plus-like connect strings.
   (contributed by Oracle Corporation)

     require 'oci8'
     conn = OCI8.new('username/password@tns_name')
     # instead of OCI8.new('username', 'password', 'tns_name')

2. Add a rpm spec file.
   (contributed by Brian Candler)

     rpmbuild -tb ruby-oci8-x.y.z.tar.gz

     /usr/src/redhat/RPMS/i386/ruby-oci8-x.y.z-1.i386.rpm

3. support BINARY_FLOAT and BINADY_DOUBLE columns.
   (This problem is reported by Duncan McCaffery.)

4. support NCLOB columns.
   (This problem is reported by Dmitry Zadvornykh.)

     cursor = conn.exec('select nclob_column from nclob_table')
     cursor.fetch # => [ instance of OCI8::NCLOB ]

5. add new CLOB/NCLOB/BLOB insert method.
   (This is available on Oracle 8.1.5 or later.)

     cursor = conn.parse("INSERT INTO clob_table VALUES (:1)")
     cursor.bind_param(1, OCI8::CLOB.new(conn, lob_data))
     cursor.exec

     cursor = conn.parse("INSERT INTO nclob_table VALUES (:1)")
     cursor.exec(OCI8::NCLOB.new(conn, lob_data))

     conn.exec("INSERT INTO blob_table VALUES (:1)",
               OCI8::BLOB.new(conn, lob_data))

   This is added to insert CLOB as a SDO_GEOMETRY's parameter
   to solve a problem reported by Pete Schwamb.

6. add an error location in C code to OCIException's backtrace.
   This is for debug information.

1.0.0-rc1:

1. support BFILE columns.

2. check whether Full Client or Instant Client by checking load library
   path on configuration to compile.

3. raise an OCIError with "OCI Library Initialization Error" message if
   no message can not be retrieved when requiring oci8lib.so.

4. raise "OCI Library Initialization Error" when first connect instead
   of requiring oci8lib.so. This is a workaround to prevent Rails from
   being stopped on invalid Oracle environment.

0.1.16:

1. Add LONG and LONG RAW support longer than 65535 bytes.

   Use OCI8#long_read_len and OCI8#long_read_len= to set max long length.
   The default value is 65535.

2. OraDate and OraNumber can be serialized by Marshal now.

3. OraDate and OraNumber can be serialized by YAML now.

4. Fix bug on OraDate#dup, OraDate#clone, OraNumber#dup and OraNumber#clone.
   (reported by Daniel Berger.)

   These methods had not duplicated their contents, which caused segmentation
   fault. Now they duplicate their contents also by adding initialize_copy
   method.

5. Add a workaround code on cygwin environment variables problem.

   Cygwin manages environment variables by itself. They don't synchroize
   with Win32's ones. When setting Oracle's environment variables, they
   are set to cygwin's environment. But Oracle client library read
   Win32's. Now Oracle-related variables are forcedly set to Win32.

6. Accept all Fixnum values when binding as a Fixnum on 64-bit ruby.

   A Fixnum is a 31-bit integer on 32-bit ruby, 63-bit integer on 64-bit
   ruby. But it had been bound to 32-bit integer on ruby-oci8. Now it is
   bound to integer whose bit width is same with ruby.

0.1.15:

1. no new features. :-<

2. suppress memory usage when binding a placeholder which is already bound.

     require 'oci8'
     conn = OCI8.new('ruby', 'oci8')
     cursor = conn.parse('select * from foo where key = :key')
     0.upto(10000) do |key|
       # bind values had not freed until cursor.close.
       # Now they are freed when GC is run.
       cursor.bind_param('key', key)
       cursor.exec
       .... fetch ....
     end

3. fix potentially segmentation fault while exiting process.
   When exiting process, ruby's objects are GCed with unexpectable
   order. If an OCIEnv instance was GCed in prior to OCIRowid objects,
   it caused segmentation fault. 

4. add a workaround code when setting $0.
   The following code made enviroment variables empty strings on
   Unix when using ruby 1.8.4, ruby-oci8 0.1.14 and Oracle 10.1.0.
   (Oracle 10.2.0 and ruby 1.8.2 doesn't have this problem.)

     require 'oci8'
     ENV['HOME'] # --> valid value
     $0 = 'foo'
     ENV['HOME'] # --> ''

5. fix registry search path on compilation.
   (OracleXE Windows version)

0.1.14:

1. add OCI8#prefetch_rows=.
    
   This specifies the number of rows in a single round trip.
   See: http://www.easysoft.com/products/data_access/odbc_oracle_driver/performance_tuning_guide.html#multiple_rows 
   In addition, setting zero may become a workaround
   of some Oracle internal problems.
   The default value is one.

2. fix bug when binding a Bignum.
3. (low-level API) add attrSet(OCI_ATTR_DESC_PUBLIC, -1).
4. (low-level API) add a constant OCI_PTYPE_UNK.
5. (internal) use OCIEnv.logon when no priviledge login.
6. (internal) delete code to register malloc/realloc/free callbacks to OCI.

0.1.13:

1. fix a memory leak.
   (fixed by Nathaniel Talbott.)

   It is recommended to update to 0.1.13 if a program executes many
   queries. That's bacause 0.1.12 cause 70-byte memory leak per a
   query.

2. ruby's DateTime support is added.
   (suggested by Daniel Berger.)

   To fetch Oracle's DATE datatype as ruby's DateTime by default, add
   the following code to your program.

     OCI8::BindType::Mapping[OCI8::SQLT_DAT] = OCI8::BindType::DateTime
     OCI8::BindType::Mapping[OCI8::SQLT_TIMESTAMP] = OCI8::BindType::DateTime
