1. How to make

Unix (not Oracle Instant Client):

  make sure the environment variable ORACLE_HOME is set correctly.
  run the the following commands.

    make

Windows (not Oracle Instant Client):

  ORACLE_HOME is got from the Windows registry.

  MS Visual C++:
    make sure ruby is in PATH and nmake works fine.
    run the the following commands.

    nmake

  Cygwin or Mingw32:
    make sure ruby is in PATH.
    run the the following commands.

      make

  Borland C++ Builder:

    make sure ruby is in PATH and make works fine.
    run the the following commands.

      make

Oracle Instant Client(Unix and Windows):

  linux:
    ruby setup.rb config -- --with-instant-client
    make

  other UNIX or Windows:
    ruby setup.rb config -- --with-instant-client=/path/to/instantclient10_1
    make (or nmake)

2. How to run unit test

  before runing unit test, 
  1. connect to Oracle as system:

      $ sqlplus system/<password_of_system>

  2. create user ruby:

      SQL> CREATE USER ruby IDENTIFIED BY oci8;

     or

      SQL> CREATE USER ruby IDENTIFIED BY oci8
         2 DEFAULT TABLESPACE users TEMPORARY TABLESPACE temp;

  3. grant the privilege to connect and execute.

      SQL> GRANT connect, resource TO ruby;

  4. If the Oracle version is 8i or later:

      SQL> CREATE TABLE ruby.test_clob (filename VARCHAR2(40), content CLOB);

  5. connect to Oracle as sys

      $ sqlplus 'sys/<password_of_sys> as sysdba'

  6. grant the privilege for the unittest of blocking-mode.

      SQL> GRANT EXECUTE ON dbms_lock TO ruby;

  7. change test/config.rb as you like

  Then you can run:
    $ make check
  or
    $ nmake check   (If your compiler is MS Visual C++.)

3. TODO

  * more proper handling of OCI_SUCCESS_WITH_INFO.
  * support Timestamp.

4. On compilation failure

  Please report the following information to kubo@jiubao.org.

  * last 100 lines of 'ext/oci8/mkmf.log'.
  * the results of the following commands:
      ruby -r rbconfig -e "p Config::CONFIG['host']"
      ruby -r rbconfig -e "p Config::CONFIG['CC']"
      ruby -r rbconfig -e "p Config::CONFIG['CFLAGS']"
      ruby -r rbconfig -e "p Config::CONFIG['LDSHARED']"
      ruby -r rbconfig -e "p Config::CONFIG['LDFLAGS']"
      ruby -r rbconfig -e "p Config::CONFIG['LIBS']"
      ruby -r rbconfig -e "p Config::CONFIG['GNU_LD']"
  * if you use gcc:
      gcc --print-prog-name=ld
      gcc --print-prog-name=as
  * on platforms which can use both 32bit/64bit binaries:
      file $ORACLE_HOME/bin/oracle
      file `which ruby`
      echo $LD_LIBRARY_PATH

5. How to customize fetched datatypes.

  OCI8::BindType::Mapping is available to change the mapping of Oracle
  datatypes and ruby datatypes.

  Calculated number values whose precision is unknown and NUMBER
  datatypes that have no explicit setting of their precision and scale
  are selected as Float by default.
  On Oracle 9.2.0.2 or below:
    OCI8::BindType::Mapping[:number_unknown_prec] changes both behaviors.
    OCI8::BindType::Mapping[:number_no_prec_setting] changes none.
  On Oracle 9.2.0.3 or above:
    OCI8::BindType::Mapping[:number_unknown_prec] changes the former.
    OCI8::BindType::Mapping[:number_no_prec_setting] changes the latter.
  Available setting values are OCI8::BindType::Fixnum, OCI8::BindType::Integer
  and OCI8::BindType::Float.

    create table tab1 (col1 number);
    select col1 from tab1; # col1: NUMBER datatype without precision and scale.
    select col1 * 1.1 as cal1 from tab1; # cal1: calculated value.

  To select col1 as Fixnum:
    On Oracle 9.2.0.2 or below:
      OCI8::BindType::Mapping[:number_unknown_prec] = OCI8::BindType::Fixnum
    On Oracle 9.2.0.3 or above:
      OCI8::BindType::Mapping[:number_no_prec_setting] = OCI8::BindType::Fixnum

  If you hate the side-effect of setting OCI8::BindType::Mapping, I
  recommend you to define the datatype by explicitly:
    cur = con.parse('select col1 from tab1')
    cur.define(1, Fixnum)

  There are other undocumented features but it will be formally
  supported on ruby-oci8 0.2.x.
